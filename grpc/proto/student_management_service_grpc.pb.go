// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: proto/student_management_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StudentManagementService_Register_FullMethodName       = "/proto.StudentManagementService/Register"
	StudentManagementService_Login_FullMethodName          = "/proto.StudentManagementService/Login"
	StudentManagementService_GetStudentById_FullMethodName = "/proto.StudentManagementService/GetStudentById"
	StudentManagementService_CreateCourse_FullMethodName   = "/proto.StudentManagementService/CreateCourse"
	StudentManagementService_GetAllStudents_FullMethodName = "/proto.StudentManagementService/GetAllStudents"
	StudentManagementService_CreateStudent_FullMethodName  = "/proto.StudentManagementService/CreateStudent"
	StudentManagementService_UpdateStudent_FullMethodName  = "/proto.StudentManagementService/UpdateStudent"
	StudentManagementService_DeleteStudent_FullMethodName  = "/proto.StudentManagementService/DeleteStudent"
)

// StudentManagementServiceClient is the client API for StudentManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentManagementServiceClient interface {
	Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*Message, error)
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*TokenId, error)
	GetStudentById(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*Student, error)
	CreateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*Message, error)
	GetAllStudents(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StudentList], error)
	CreateStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Message, error)
	UpdateStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error)
	DeleteStudent(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*Message, error)
}

type studentManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentManagementServiceClient(cc grpc.ClientConnInterface) StudentManagementServiceClient {
	return &studentManagementServiceClient{cc}
}

func (c *studentManagementServiceClient) Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, StudentManagementService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentManagementServiceClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*TokenId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenId)
	err := c.cc.Invoke(ctx, StudentManagementService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentManagementServiceClient) GetStudentById(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*Student, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Student)
	err := c.cc.Invoke(ctx, StudentManagementService_GetStudentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentManagementServiceClient) CreateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, StudentManagementService_CreateCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentManagementServiceClient) GetAllStudents(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StudentList], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StudentManagementService_ServiceDesc.Streams[0], StudentManagementService_GetAllStudents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NoParam, StudentList]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StudentManagementService_GetAllStudentsClient = grpc.ServerStreamingClient[StudentList]

func (c *studentManagementServiceClient) CreateStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, StudentManagementService_CreateStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentManagementServiceClient) UpdateStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Student)
	err := c.cc.Invoke(ctx, StudentManagementService_UpdateStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentManagementServiceClient) DeleteStudent(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, StudentManagementService_DeleteStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentManagementServiceServer is the server API for StudentManagementService service.
// All implementations must embed UnimplementedStudentManagementServiceServer
// for forward compatibility.
type StudentManagementServiceServer interface {
	Register(context.Context, *User) (*Message, error)
	Login(context.Context, *User) (*TokenId, error)
	GetStudentById(context.Context, *StudentId) (*Student, error)
	CreateCourse(context.Context, *Course) (*Message, error)
	GetAllStudents(*NoParam, grpc.ServerStreamingServer[StudentList]) error
	CreateStudent(context.Context, *Student) (*Message, error)
	UpdateStudent(context.Context, *Student) (*Student, error)
	DeleteStudent(context.Context, *StudentId) (*Message, error)
	mustEmbedUnimplementedStudentManagementServiceServer()
}

// UnimplementedStudentManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStudentManagementServiceServer struct{}

func (UnimplementedStudentManagementServiceServer) Register(context.Context, *User) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedStudentManagementServiceServer) Login(context.Context, *User) (*TokenId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedStudentManagementServiceServer) GetStudentById(context.Context, *StudentId) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentById not implemented")
}
func (UnimplementedStudentManagementServiceServer) CreateCourse(context.Context, *Course) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourse not implemented")
}
func (UnimplementedStudentManagementServiceServer) GetAllStudents(*NoParam, grpc.ServerStreamingServer[StudentList]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllStudents not implemented")
}
func (UnimplementedStudentManagementServiceServer) CreateStudent(context.Context, *Student) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedStudentManagementServiceServer) UpdateStudent(context.Context, *Student) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedStudentManagementServiceServer) DeleteStudent(context.Context, *StudentId) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (UnimplementedStudentManagementServiceServer) mustEmbedUnimplementedStudentManagementServiceServer() {
}
func (UnimplementedStudentManagementServiceServer) testEmbeddedByValue() {}

// UnsafeStudentManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentManagementServiceServer will
// result in compilation errors.
type UnsafeStudentManagementServiceServer interface {
	mustEmbedUnimplementedStudentManagementServiceServer()
}

func RegisterStudentManagementServiceServer(s grpc.ServiceRegistrar, srv StudentManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedStudentManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StudentManagementService_ServiceDesc, srv)
}

func _StudentManagementService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentManagementServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentManagementService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentManagementServiceServer).Register(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentManagementService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentManagementServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentManagementService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentManagementServiceServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentManagementService_GetStudentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentManagementServiceServer).GetStudentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentManagementService_GetStudentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentManagementServiceServer).GetStudentById(ctx, req.(*StudentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentManagementService_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Course)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentManagementServiceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentManagementService_CreateCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentManagementServiceServer).CreateCourse(ctx, req.(*Course))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentManagementService_GetAllStudents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudentManagementServiceServer).GetAllStudents(m, &grpc.GenericServerStream[NoParam, StudentList]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StudentManagementService_GetAllStudentsServer = grpc.ServerStreamingServer[StudentList]

func _StudentManagementService_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentManagementServiceServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentManagementService_CreateStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentManagementServiceServer).CreateStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentManagementService_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentManagementServiceServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentManagementService_UpdateStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentManagementServiceServer).UpdateStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentManagementService_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentManagementServiceServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentManagementService_DeleteStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentManagementServiceServer).DeleteStudent(ctx, req.(*StudentId))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentManagementService_ServiceDesc is the grpc.ServiceDesc for StudentManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StudentManagementService",
	HandlerType: (*StudentManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _StudentManagementService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _StudentManagementService_Login_Handler,
		},
		{
			MethodName: "GetStudentById",
			Handler:    _StudentManagementService_GetStudentById_Handler,
		},
		{
			MethodName: "CreateCourse",
			Handler:    _StudentManagementService_CreateCourse_Handler,
		},
		{
			MethodName: "CreateStudent",
			Handler:    _StudentManagementService_CreateStudent_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _StudentManagementService_UpdateStudent_Handler,
		},
		{
			MethodName: "DeleteStudent",
			Handler:    _StudentManagementService_DeleteStudent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllStudents",
			Handler:       _StudentManagementService_GetAllStudents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/student_management_service.proto",
}
